import logging
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ (–ª—É—á—à–µ —Ö—Ä–∞–Ω–∏—Ç—å –≤ .env)
TOKEN = "8195308262:AAFuWetZ6_tfEZsR_pGdsn6NjJa7KDjRToU"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(
    token=TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã
quiz_data = [
    {"question": "–ö—Ç–æ –æ—Å–Ω–æ–≤–∞–ª –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥?", "answer": "–ü—ë—Ç—Ä I"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?", "answer": "1380"},
    {"question": "–ü–µ—Ä–≤—ã–π —Ü–∞—Ä—å –∏–∑ –¥–∏–Ω–∞—Å—Ç–∏–∏ –†–æ–º–∞–Ω–æ–≤—ã—Ö?", "answer": "–ú–∏—Ö–∞–∏–ª –§—ë–¥–æ—Ä–æ–≤–∏—á"}
]
current_question = None
user_scores = {}

# –ö–æ–º–∞–Ω–¥–∞ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="/quiz"))
    await message.answer(
        "üìú –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.\n–ù–∞–∂–º–∏ /quiz —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# –ö–æ–º–∞–Ω–¥–∞ /quiz
@dp.message(Command("quiz"))
async def cmd_quiz(message: types.Message):
    global current_question
    if message.chat.type not in ("group", "supergroup"):
        await message.answer("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö!")
        return
    
    question = quiz_data[len(user_scores) % len(quiz_data)]
    current_question = question["question"]
    await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å: {current_question}\n(–û—Ç–≤–µ—Ç: {question['answer']})")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤
@dp.message()
async def check_answer(message: types.Message):
    global current_question
    if not current_question or message.chat.type not in ("group", "supergroup"):
        return
    
    user_id = message.from_user.id
    correct_answer = quiz_data[len(user_scores) % len(quiz_data)]["answer"]
    
    if message.text.strip().lower() == correct_answer.lower():
        user_scores[user_id] = user_scores.get(user_id, 0) + 1
        await message.reply(
            f"‚úÖ {message.from_user.first_name}, –≤–µ—Ä–Ω–æ! –¢–≤–æ–π —Å—á—ë—Ç: {user_scores[user_id]}\n"
            f"–°–ª–µ–¥—É—é—â–∏–π –≤–æ–ø—Ä–æ—Å: /quiz"
        )
        current_question = None

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())