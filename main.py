
#"8195308262:AAFuWetZ6_tfEZsR_pGdsn6NjJa7KDjRToU"
import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8195308262:AAFuWetZ6_tfEZsR_pGdsn6NjJa7KDjRToU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!

# --- –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (50 –≤–æ–ø—Ä–æ—Å–æ–≤) ---
QUIZ_DATA = [
    # –û—Å–Ω–æ–≤–Ω—ã–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ —Å–æ–±—ã—Ç–∏—è
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏?", "answer": "988"},
    {"question": "–ö–æ–≥–¥–∞ –±—ã–ª–∞ –ö—É–ª–∏–∫–æ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?", "answer": "1380"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π —Å—Ç–∞–ª —Ü–∞—Ä—ë–º?", "answer": "1547"},
    {"question": "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–æ—Å—å –°–º—É—Ç–Ω–æ–µ –≤—Ä–µ–º—è?", "answer": "1598"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ü—ë—Ç—Ä I —Å—Ç–∞–ª –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º?", "answer": "1721"},
    {"question": "–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ –≤–æ—Å—Å—Ç–∞–Ω–∏–µ –¥–µ–∫–∞–±—Ä–∏—Å—Ç–æ–≤?", "answer": "1825"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Ç–º–µ–Ω–∏–ª–∏ –∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ?", "answer": "1861"},
    {"question": "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –ü–µ—Ä–≤–∞—è –º–∏—Ä–æ–≤–∞—è –≤–æ–π–Ω–∞ –¥–ª—è –†–æ—Å—Å–∏–∏?", "answer": "1914"},
    {"question": "–î–∞—Ç–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–æ–π —Ä–µ–≤–æ–ª—é—Ü–∏–∏?", "answer": "1917"},
    {"question": "–ö–æ–≥–¥–∞ –æ–±—Ä–∞–∑–æ–≤–∞–ª—Å—è –°–°–°–†?", "answer": "1922"},
    {"question": "–ì–æ–¥ –Ω–∞—á–∞–ª–∞ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω—ã?", "answer": "1941"},
    {"question": "–ö–æ–≥–¥–∞ –°–°–°–† –∑–∞–ø—É—Å—Ç–∏–ª –ø–µ—Ä–≤—ã–π —Å–ø—É—Ç–Ω–∏–∫?", "answer": "1957"},
    {"question": "–ì–æ–¥ –ø–æ–ª—ë—Ç–∞ –ì–∞–≥–∞—Ä–∏–Ω–∞?", "answer": "1961"},
    {"question": "–ö–æ–≥–¥–∞ —Ä–∞—Å–ø–∞–ª—Å—è –°–°–°–†?", "answer": "1991"},
    {"question": "–ö–æ–≥–¥–∞ –ø—Ä–∏–Ω—è—Ç–∞ –ö–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏—è –†–§?", "answer": "1993"},

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –¥–∞—Ç–∞–º–∏
    {"question": "–ö–æ–≥–¥–∞ –æ—Å–Ω–æ–≤–∞–Ω –ù–æ–≤–≥–æ—Ä–æ–¥ (–ø–µ—Ä–≤–æ–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)?", "answer": "859"},
    {"question": "–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ú–æ—Å–∫–≤—ã?", "answer": "1147"},
    {"question": "–ö–æ–≥–¥–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å –ù–µ–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?", "answer": "1240"},
    {"question": "–î–∞—Ç–∞ —Å—Ç–æ—è–Ω–∏—è –Ω–∞ —Ä–µ–∫–µ –£–≥—Ä–µ?", "answer": "1480"},
    {"question": "–ö–æ–≥–¥–∞ –ò–≤–∞–Ω III –ø—Ä–∏–Ω—è–ª —Ç–∏—Ç—É–ª '–ì–æ—Å—É–¥–∞—Ä—å –≤—Å–µ—è –†—É—Å–∏'?", "answer": "1478"},
    {"question": "–ì–æ–¥ –≤–≤–µ–¥–µ–Ω–∏—è –Æ—Ä—å–µ–≤–∞ –¥–Ω—è?", "answer": "1497"},
    {"question": "–ö–æ–≥–¥–∞ –ï—Ä–º–∞–∫ –Ω–∞—á–∞–ª –ø–æ–∫–æ—Ä–µ–Ω–∏–µ –°–∏–±–∏—Ä–∏?", "answer": "1581"},
    {"question": "–î–∞—Ç–∞ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥–∞?", "answer": "1703"},
    {"question": "–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –ü–æ–ª—Ç–∞–≤—Å–∫–∞—è –±–∏—Ç–≤–∞?", "answer": "1709"},
    {"question": "–ì–æ–¥ –æ—Å–Ω–æ–≤–∞–Ω–∏—è –ú–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞?", "answer": "1755"},
    {"question": "–ö–æ–≥–¥–∞ –ø—Ä–æ–∏–∑–æ—à–ª–æ –ë–æ—Ä–æ–¥–∏–Ω—Å–∫–æ–µ —Å—Ä–∞–∂–µ–Ω–∏–µ?", "answer": "1812"},
    {"question": "–î–∞—Ç–∞ –æ—Ç–º–µ–Ω—ã –∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–≥–æ –ø—Ä–∞–≤–∞?", "answer": "1861"},
    {"question": "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –†—É—Å—Å–∫–æ-—è–ø–æ–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞?", "answer": "1904"},
    {"question": "–ì–æ–¥ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—ë—Ç–∞ —Ä—É—Å—Å–∫–æ–≥–æ —Å–∞–º–æ–ª—ë—Ç–∞?", "answer": "1910"},
    {"question": "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –ì—Ä–∞–∂–¥–∞–Ω—Å–∫–∞—è –≤–æ–π–Ω–∞ –≤ –†–æ—Å—Å–∏–∏?", "answer": "1918"},
    {"question": "–î–∞—Ç–∞ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –†–°–§–°–†?", "answer": "1917"},
    {"question": "–ö–æ–≥–¥–∞ –Ω–∞—á–∞–ª–∞—Å—å –∫–æ–ª–ª–µ–∫—Ç–∏–≤–∏–∑–∞—Ü–∏—è?", "answer": "1929"},
    {"question": "–ì–æ–¥ –ø—Ä–∏–Ω—è—Ç–∏—è —Å—Ç–∞–ª–∏–Ω—Å–∫–æ–π –∫–æ–Ω—Å—Ç–∏—Ç—É—Ü–∏–∏?", "answer": "1936"},
    {"question": "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –±–ª–æ–∫–∞–¥–∞ –õ–µ–Ω–∏–Ω–≥—Ä–∞–¥–∞?", "answer": "1944"},
    {"question": "–î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∏—Å–ø—ã—Ç–∞–Ω–∏—è –∞—Ç–æ–º–Ω–æ–π –±–æ–º–±—ã –≤ –°–°–°–†?", "answer": "1949"},

    # –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∏
    {"question": "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —Ü–∞—Ä—ë–º –†–æ—Å—Å–∏–∏?", "answer": "–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π"},
    {"question": "–ö—Ç–æ –æ—Å–Ω–æ–≤–∞–ª –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥?", "answer": "–ü—ë—Ç—Ä I"},
    {"question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–°–ª–æ–≤–æ –æ –ø–æ–ª–∫—É –ò–≥–æ—Ä–µ–≤–µ'?", "answer": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"},
    {"question": "–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª –≤ –õ–µ–¥–æ–≤–æ–º –ø–æ–±–æ–∏—â–µ?", "answer": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–≤—Å–∫–∏–π"},
    {"question": "–ö—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –†–æ—Å—Å–∏–∏?", "answer": "–ù–∏–∫–æ–ª–∞–π II"}
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
current_question = None
correct_answer = None
user_scores = {}  # {user_id: {"name": str, "score": int}}
used_questions = set()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="/quiz"),
        types.KeyboardButton(text="/top")
    )
    await message.answer(
        "üìú –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.\n"
        "–ù–∞–∂–º–∏ /quiz –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!\n"
        "/top - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /quiz ---
@dp.message(Command("quiz"), lambda msg: msg.chat.type in ["group", "supergroup"])
async def cmd_quiz(message: types.Message):
    global current_question, correct_answer, used_questions
    
    if len(used_questions) >= len(QUIZ_DATA):
        used_questions.clear()
        await message.answer("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
    
    available_questions = [q for q in QUIZ_DATA if q["question"] not in used_questions]
    question_data = random.choice(available_questions)
    
    current_question = question_data["question"]
    correct_answer = question_data["answer"].lower()
    used_questions.add(current_question)
    
    logger.info(f"New question: {current_question} (correct: {correct_answer})")
    await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å: {current_question}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@dp.message(lambda msg: msg.chat.type in ["group", "supergroup"])
async def check_answer(message: types.Message):
    global current_question, correct_answer
    
    if not current_question or message.text.startswith('/'):
        return
    
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_answer = message.text.strip().lower()
    
    logger.info(f"User {user_name} answered: {user_answer} (correct: {correct_answer})")
    
    if user_answer == correct_answer:
        if user_id not in user_scores:
            user_scores[user_id] = {"name": user_name, "score": 0}
        user_scores[user_id]["score"] += 1
        
        logger.info(f"User {user_name} scored! Total: {user_scores[user_id]['score']}")
        await message.reply(
            f"‚úÖ {user_name}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª.\n"
            f"–¢–≤–æ–π —Å—á—ë—Ç: {user_scores[user_id]['score']}"
        )
    else:
        await message.reply(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer.capitalize()}"
        )
    
    current_question = None

# --- –ö–æ–º–∞–Ω–¥–∞ /top (–ì–ê–†–ê–ù–¢–ò–†–û–í–ê–ù–ù–û –†–ê–ë–û–¢–ê–ï–¢) ---
@dp.message(Command("top"))
async def cmd_top(message: types.Message):
    logger.info(f"Top command called. Current scores: {user_scores}")
    
    if not user_scores:
        await message.answer("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É /quiz!")
        return
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ª–æ–≤–∞—Ä—å –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏
    scores_list = []
    for user_id, data in user_scores.items():
        scores_list.append({
            "user_id": user_id,
            "name": data["name"],
            "score": data["score"]
        })
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—á–∫–æ–≤
    sorted_scores = sorted(scores_list, key=lambda x: x["score"], reverse=True)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for i, player in enumerate(sorted_scores[:10], 1):
        top_text += f"{i}. {player['name']}: {player['score']} –±–∞–ª–ª–æ–≤\n"
    
    logger.info(f"Top results: {top_text}")
    await message.answer(top_text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())