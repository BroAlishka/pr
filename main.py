
#"8195308262:AAFuWetZ6_tfEZsR_pGdsn6NjJa7KDjRToU"

import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8195308262:AAFuWetZ6_tfEZsR_pGdsn6NjJa7KDjRToU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!

# --- –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã (30 –≤–æ–ø—Ä–æ—Å–æ–≤) ---
QUIZ_DATA = [
    # –ü–µ—Ä–≤—ã–µ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏)
    {"question": "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —Ü–∞—Ä—ë–º –†–æ—Å—Å–∏–∏?", "answer": "–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏?", "answer": "988"},
    {"question": "–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª –≤ –õ–µ–¥–æ–≤–æ–º –ø–æ–±–æ–∏—â–µ?", "answer": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–≤—Å–∫–∏–π"},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–∞—Å—å –ø–µ—Ä–≤–∞—è —Ä—É—Å—Å–∫–∞—è –ª–µ—Ç–æ–ø–∏—Å—å?", "answer": "–ü–æ–≤–µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–µ—Ç"},
    {"question": "–ö—Ç–æ –æ—Å–Ω–æ–≤–∞–ª –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥?", "answer": "–ü—ë—Ç—Ä I"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞?", "answer": "1941"},
    {"question": "–ö–∞–∫ –∑–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞?", "answer": "–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω"},
    {"question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–°–ª–æ–≤–æ –æ –ø–æ–ª–∫—É –ò–≥–æ—Ä–µ–≤–µ'?", "answer": "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∞–≤—Ç–æ—Ä"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –æ—Ç–º–µ–Ω–∏–ª–∏ –∫—Ä–µ–ø–æ—Å—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ?", "answer": "1861"},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–æ—Å—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ –º–æ–Ω–≥–æ–ª–æ-—Ç–∞—Ç–∞—Ä –Ω–∞ –†—É—Å–∏?", "answer": "–ó–æ–ª–æ—Ç–∞—è –û—Äda"},
    {"question": "–ö—Ç–æ –≤–æ–∑–≥–ª–∞–≤–ª—è–ª –ö—Ä–∞—Å–Ω—É—é –ê—Ä–º–∏—é –≤ –ì—Ä–∞–∂–¥–∞–Ω—Å–∫—É—é –≤–æ–π–Ω—É?", "answer": "–õ–µ–≤ –¢—Ä–æ—Ü–∫–∏–π"},
    {"question": "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –±—ã–ª –ø–µ—Ä–≤–æ–π —Å—Ç–æ–ª–∏—Ü–µ–π –î—Ä–µ–≤–Ω–µ–π –†—É—Å–∏?", "answer": "–ù–æ–≤–≥–æ—Ä–æ–¥"},
    {"question": "–ö—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–º –∏–º–ø–µ—Ä–∞—Ç–æ—Ä–æ–º –†–æ—Å—Å–∏–∏?", "answer": "–ù–∏–∫–æ–ª–∞–π II"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–∞ –û–∫—Ç—è–±—Ä—å—Å–∫–∞—è —Ä–µ–≤–æ–ª—é—Ü–∏—è?", "answer": "1917"},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è –ø–µ—Ä–≤—ã–π —Ä—É—Å—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç?", "answer": "–ú–æ—Å–∫–æ–≤—Å–∫–∏–π —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç"},
    {"question": "–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª –≤ –ö—É–ª–∏–∫–æ–≤—Å–∫–æ–π –±–∏—Ç–≤–µ?", "answer": "–î–º–∏—Ç—Ä–∏–π –î–æ–Ω—Å–∫–æ–π"},
    {"question": "–ö–∞–∫–æ–π –∫–Ω—è–∑—å –ø—Ä–∏–Ω—è–ª —Ö—Ä–∏—Å—Ç–∏–∞–Ω—Å—Ç–≤–æ –Ω–∞ –†—É—Å–∏?", "answer": "–í–ª–∞–¥–∏–º–∏—Ä –ö—Ä–∞—Å–Ω–æ –°–æ–ª–Ω—ã—à–∫–æ"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É —Ä–∞—Å–ø–∞–ª—Å—è –°–°–°–†?", "answer": "1991"},
    {"question": "–ö–∞–∫–æ–π –≥–æ—Ä–æ–¥ –≤—ã–¥–µ—Ä–∂–∞–ª 900-–¥–Ω–µ–≤–Ω—É—é –±–ª–æ–∫–∞–¥—É?", "answer": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥"},
    {"question": "–ö—Ç–æ –Ω–∞–ø–∏—Å–∞–ª '–í–æ–π–Ω—É –∏ –º–∏—Ä'?", "answer": "–õ–µ–≤ –¢–æ–ª—Å—Ç–æ–π"},

    # –ù–æ–≤—ã–µ 10 –≤–æ–ø—Ä–æ—Å–æ–≤:
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–∞—Å—å –ø–µ—Ä–≤–∞—è –ø–µ—á–∞—Ç–Ω–∞—è –∫–Ω–∏–≥–∞ –Ω–∞ –†—É—Å–∏?", "answer": "–ê–ø–æ—Å—Ç–æ–ª"},
    {"question": "–ö—Ç–æ –≤–æ–∑–≥–ª–∞–≤–∏–ª –ø–µ—Ä–≤–æ–µ –∫—Ä—É–≥–æ—Å–≤–µ—Ç–Ω–æ–µ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µ –†–æ—Å—Å–∏–∏?", "answer": "–ò–≤–∞–Ω –ö—Ä—É–∑–µ–Ω—à—Ç–µ—Ä–Ω"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –±—ã–ª–∞ –æ—Å–Ω–æ–≤–∞–Ω–∞ –ú–æ—Å–∫–≤–∞?", "answer": "1147"},
    {"question": "–ö–∞–∫–æ–π —Ü–∞—Ä—å –≤–≤—ë–ª –æ–ø—Ä–∏—á–Ω–∏–Ω—É?", "answer": "–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π"},
    {"question": "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º –ø—Ä–µ–∑–∏–¥–µ–Ω—Ç–æ–º –†–æ—Å—Å–∏–∏?", "answer": "–ë–æ—Ä–∏—Å –ï–ª—å—Ü–∏–Ω"},
    {"question": "–ö–∞–∫–æ–µ —Å—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞–ª–æ –ø–µ—Ä–µ–ª–æ–º–Ω—ã–º –≤ –í–µ–ª–∏–∫–æ–π –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –≤–æ–π–Ω–µ?", "answer": "–°—Ç–∞–ª–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –±–∏—Ç–≤–∞"},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª—Å—è –º–∏—Ä–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä, –∑–∞–≤–µ—Ä—à–∏–≤—à–∏–π –°–µ–≤–µ—Ä–Ω—É—é –≤–æ–π–Ω—É?", "answer": "–ù–∏—à—Ç–∞–¥—Ç—Å–∫–∏–π"},
    {"question": "–ö—Ç–æ —Å–æ–∑–¥–∞–ª –ø–µ—Ä–≤—ã–π —Ä—É—Å—Å–∫–∏–π —Ç–µ–∞—Ç—Ä?", "answer": "–§—ë–¥–æ—Ä –í–æ–ª–∫–æ–≤"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –†–æ—Å—Å–∏—è —Å—Ç–∞–ª–∞ –∏–º–ø–µ—Ä–∏–µ–π?", "answer": "1721"},
    {"question": "–ö–∞–∫–æ–π —Ö—É–¥–æ–∂–Ω–∏–∫ –Ω–∞–ø–∏—Å–∞–ª '–ë–æ–≥–∞—Ç—ã—Ä–µ–π'?", "answer": "–í–∏–∫—Ç–æ—Ä –í–∞—Å–Ω–µ—Ü–æ–≤"}
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
current_question = None
correct_answer = None
user_scores = {}  # {user_id: {"name": str, "score": int}}
used_questions = set()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.row(
        types.KeyboardButton(text="/quiz"),
        types.KeyboardButton(text="/top")
    )
    await message.answer(
        "üìú –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.\n"
        "–ù–∞–∂–º–∏ /quiz –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!\n"
        "/top - —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /quiz ---
@dp.message(Command("quiz"), lambda msg: msg.chat.type in ["group", "supergroup"])
async def cmd_quiz(message: types.Message):
    global current_question, correct_answer, used_questions
    
    if len(used_questions) >= len(QUIZ_DATA):
        used_questions.clear()
        await message.answer("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ.")
    
    available_questions = [q for q in QUIZ_DATA if q["question"] not in used_questions]
    question_data = random.choice(available_questions)
    
    current_question = question_data["question"]
    correct_answer = question_data["answer"].lower()
    used_questions.add(current_question)
    
    await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å: {current_question}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@dp.message(lambda msg: msg.chat.type in ["group", "supergroup"])
async def check_answer(message: types.Message):
    global current_question, correct_answer
    
    if not current_question or message.text.startswith('/'):
        return
    
    user_id = message.from_user.id
    user_name = message.from_user.first_name
    user_answer = message.text.strip().lower()
    
    if user_answer == correct_answer:
        if user_id not in user_scores:
            user_scores[user_id] = {"name": user_name, "score": 0}
        user_scores[user_id]["score"] += 1
        
        await message.reply(
            f"‚úÖ {user_name}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª.\n"
            f"–¢–≤–æ–π —Å—á—ë—Ç: {user_scores[user_id]['score']}"
        )
    else:
        await message.reply(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer.capitalize()}"
        )
    
    current_question = None

# --- –ö–æ–º–∞–Ω–¥–∞ /top (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø) ---
@dp.message(Command("top"))
async def cmd_top(message: types.Message):
    if not user_scores:
        await message.answer("–†–µ–π—Ç–∏–Ω–≥ –ø—É—Å—Ç. –ù–∞—á–Ω–∏—Ç–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—É /quiz!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ä—Ç–∏—Ä—É–µ–º –∏–≥—Ä–æ–∫–æ–≤
    sorted_players = sorted(
        user_scores.values(),
        key=lambda x: x["score"],
        reverse=True
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
    top_text = "üèÜ –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤:\n"
    for idx, player in enumerate(sorted_players[:10], 1):
        top_text += f"{idx}. {player['name']}: {player['score']} –±–∞–ª–ª–æ–≤\n"
    
    await message.answer(top_text)

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())