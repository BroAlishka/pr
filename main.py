
#"8195308262:AAFuWetZ6_tfEZsR_pGdsn6NjJa7KDjRToU"

import logging
import random
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.client.default import DefaultBotProperties
from aiogram.utils.keyboard import ReplyKeyboardBuilder

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = "8195308262:AAFuWetZ6_tfEZsR_pGdsn6NjJa7KDjRToU"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ç–æ–∫–µ–Ω!

# --- –î–∞–Ω–Ω—ã–µ –≤–∏–∫—Ç–æ—Ä–∏–Ω—ã ---
QUIZ_DATA = [
    {"question": "–ö—Ç–æ –±—ã–ª –ø–µ—Ä–≤—ã–º —Ü–∞—Ä—ë–º –†–æ—Å—Å–∏–∏?", "answer": "–ò–≤–∞–Ω –ì—Ä–æ–∑–Ω—ã–π"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –ø—Ä–æ–∏–∑–æ—à–ª–æ –ö—Ä–µ—â–µ–Ω–∏–µ –†—É—Å–∏?", "answer": "988"},
    {"question": "–ö—Ç–æ –ø–æ–±–µ–¥–∏–ª –≤ –õ–µ–¥–æ–≤–æ–º –ø–æ–±–æ–∏—â–µ?", "answer": "–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ù–µ–≤—Å–∫–∏–π"},
    {"question": "–ö–∞–∫ –Ω–∞–∑—ã–≤–∞–ª–∞—Å—å –ø–µ—Ä–≤–∞—è —Ä—É—Å—Å–∫–∞—è –ª–µ—Ç–æ–ø–∏—Å—å?", "answer": "–ü–æ–≤–µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –ª–µ—Ç"},
    {"question": "–ö—Ç–æ –æ—Å–Ω–æ–≤–∞–ª –°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥?", "answer": "–ü—ë—Ç—Ä I"},
    {"question": "–í –∫–∞–∫–æ–º –≥–æ–¥—É –Ω–∞—á–∞–ª–∞—Å—å –í–µ–ª–∏–∫–∞—è –û—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –≤–æ–π–Ω–∞?", "answer": "1941"},
    {"question": "–ö–∞–∫ –∑–≤–∞–ª–∏ –ø–µ—Ä–≤–æ–≥–æ –∫–æ—Å–º–æ–Ω–∞–≤—Ç–∞?", "answer": "–Æ—Ä–∏–π –ì–∞–≥–∞—Ä–∏–Ω"},
]

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
current_question = None
correct_answer = None
user_scores = {}
used_questions = set()

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ ---
bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="/quiz"))
    await message.answer(
        "üìú –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –†–æ—Å—Å–∏–∏.\n"
        "–ù–∞–∂–º–∏ /quiz –≤ –≥—Ä—É–ø–ø–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É!",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )

# --- –ö–æ–º–∞–Ω–¥–∞ /quiz ---
@dp.message(Command("quiz"), lambda msg: msg.chat.type in ["group", "supergroup"])
async def cmd_quiz(message: types.Message):
    global current_question, correct_answer, used_questions
    
    # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –≤–æ–ø—Ä–æ—Å
    available_questions = [q for q in QUIZ_DATA if q["question"] not in used_questions]
    if not available_questions:
        await message.answer("–í—Å–µ –≤–æ–ø—Ä–æ—Å—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        used_questions.clear()
        return
    
    question_data = random.choice(available_questions)
    current_question = question_data["question"]
    correct_answer = question_data["answer"].lower()
    used_questions.add(current_question)
    
    await message.answer(f"‚ùì –í–æ–ø—Ä–æ—Å: {current_question}")

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ ---
@dp.message(lambda msg: msg.chat.type in ["group", "supergroup"])
async def check_answer(message: types.Message):
    global current_question, correct_answer
    
    if not current_question:
        return
    
    user_answer = message.text.strip().lower()
    user_id = message.from_user.id
    
    if user_answer == correct_answer:
        user_scores[user_id] = user_scores.get(user_id, 0) + 1
        await message.reply(
            f"‚úÖ {message.from_user.first_name}, –ø—Ä–∞–≤–∏–ª—å–Ω–æ! +1 –±–∞–ª–ª.\n"
            f"–¢–≤–æ–π —Å—á—ë—Ç: {user_scores[user_id]}"
        )
    else:
        await message.reply(
            f"‚ùå –ù–µ–≤–µ—Ä–Ω–æ! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_answer.capitalize()}"
        )
    
    current_question = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –æ—Ç–≤–µ—Ç–∞

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())